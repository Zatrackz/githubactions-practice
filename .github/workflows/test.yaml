# How we write a workflow for github actions

# Each job must have a unique name within the workflow. This name is used to identify tyhe job in the workflow configuration. 
name: Learn Github actions


# ON will specify what will cxause our github actions workflow to be triggered
# Every job in your workflow will have their own runner, which is a serverless or server-based computer (virtual machine or container) on which the job will run. 
# By default, there are 3 types of serverless runners that github actions will provide: Ubuntu-latest, macos-latest., or windows-latest. 
# IMPORTANT: After a job is done being executed on a serverless runless provided by github actions, that runner will be cleaned up and used by another customer
# If you want your job to run on a server-based runner (self-hosted runner), you will have to create a server and configure github actions to make use of that server.
# The workflow_dispatch argument below will make this workflow to have a workflow_dispatch event trigger i.e there will be a button that will be enabled and we can manually trigger a workflow run.

on:
    push:
      branches:
        - main
    workflow_dispatch:


# Jobs are a set of one or more steps that we want github actions to perform. You can have multiple jobs in your workflow. 
# By default, all Jobs in a workflow run in parallel with each other. However we can configure our jobs in our workflow to run conservative using the 'needs' command.
# The 'needs' command will cause jobs in a workflows to start only after sucessful completion of a specified set of jobs.
# Every job has one or more steps, which is a specific tasks that we want github actions to do. Steps in a job are executable sequential i.e executed one after the other.
# We can also name our steps. There are only TWO arguments that can be defined in a step: uses or run. In summary, uses is used to reference and execute existing actions, while run is used to define custom commands or scripts that should be executed as part of the workflow.
# uses: Specifies the action that should be executed for a step. Actions are reusable units of code. Actions are typically defined in other repositories and are referenced by their GitHub repository and version. 
# run: Specifies a shell command or script that should be executed as part of the step.
# Jobs can produce outputs artifacts or information that can be used by sequential jobs.  You can define output values in a job and other jobs can access these outputs as inputs. 

jobs:
    myfirstjob:
        runs-on: Ubuntu-latest
        steps:
          - name: clone my repository
            run: echo "I am learning github actions"

    mysecondjob:
        runs-on: Ubuntu-latest
        steps:
          - name: learning github actions
            run: echo "My second job"
  
# Made use of the needs argument here in the 3rd job. ONLY when the second job
# is successaful will the third job run. 
    mythirdjob:
      runs-on: Ubuntu-latest
      needs: mysecondjob
      steps:
        - name: learning github actions
          run: echo "My second job"

# Actions are a set of pre-writtren codes that are used to perform a particular tasks. They are configured by someone else and 
# stored in the github marketplace so that customers can leverage them. 
# Actions are perfect for tasks that you have noticed that are done repeatedly. So instead of typing these commands over and over 
# we can make use of actions to call these pre-written codes from the github marketplace. 
    myfourthjob:
      runs-on: Ubuntu-latest
      steps:
        - name: making use of actions
          uses: actions/checkout@v4